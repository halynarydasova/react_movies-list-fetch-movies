{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","React","memo","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","addMovie","useState","setMovie","searchQuery","setSearchQuery","isTitleWrong","setIsTitleWrong","isLoading","setIsLoading","handleQueryChange","useCallback","event","target","value","onSearch","query","preventDefault","fetch","then","res","json","catch","Response","Error","result","Poster","Title","Plot","imdbID","finally","onSubmit","htmlFor","type","id","placeholder","onChange","classNames","disabled","onClick","state","some","item","App","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5f8e68f9.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = React.memo(({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n));\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useCallback, useState } from 'react';\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\nimport { MovieData } from '../../types/MovieData';\nimport { MovieCard } from '../MovieCard';\nimport './FindMovie.scss';\n\ntype Props = {\n  addMovie: (setMovieFunc: (movies: Movie[]) => Movie[]) => void\n};\n\nexport const FindMovie: React.FC<Props> = React.memo(({ addMovie }) => {\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isTitleWrong, setIsTitleWrong] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const handleQueryChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setSearchQuery(event.target.value);\n      setIsTitleWrong(false);\n    }, [],\n  );\n\n  const onSearch = useCallback((event: React.ChangeEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsLoading(true);\n\n    if (searchQuery !== '') {\n      getMovie(searchQuery)\n        .then(result => {\n          const posterPlaceholder\n          = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n\n          if ('Response' in result && result.Response === 'False') {\n            setIsTitleWrong(true);\n          } else {\n            const {\n              Poster, Title, Plot, imdbID,\n            } = result as MovieData;\n\n            setMovie({\n              title: Title,\n              description: Plot,\n              imgUrl: (Poster !== 'N/A')\n                ? Poster\n                : posterPlaceholder,\n              imdbUrl: `https://www.imdb.com/title/${imdbID}`,\n              imdbId: imdbID,\n            });\n          }\n        })\n        .finally(() => setIsLoading(false));\n    }\n  }, [searchQuery]);\n\n  const onAdd = () => {\n    addMovie((state: Movie[]) => {\n      const isInMovies = state.some(item => (\n        item.imdbId === movie?.imdbId));\n\n      if (!isInMovies && movie) {\n        return (\n          [...state,\n            movie]\n        );\n      }\n\n      return state;\n    });\n\n    setMovie(null);\n    setSearchQuery('');\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={onSearch}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={searchQuery}\n              onChange={handleQueryChange}\n            />\n          </div>\n\n          {isTitleWrong && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames('button is-light', {\n                'is-loading': isLoading,\n              })}\n              disabled={searchQuery === ''}\n            >\n              {!movie\n                ? 'Find a movie'\n                : 'Search again'}\n            </button>\n          </div>\n\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={onAdd}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n});\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ResponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?i=tt3896198&apikey=25c55bd7';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie addMovie={setMovies} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}